package com.csumb.cst363;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import java.sql.*;
import java.time.LocalDate;


@Controller
public class ControllerPrescription {

   @Autowired
   private JdbcTemplate jdbcTemplate;

   /*
    * Doctor requests form to create new prescription.
    */
   @GetMapping("/prescription/new")
   public String newPrescripton(Model model) {
      model.addAttribute("prescription", new Prescription());
      return "prescription_create";
   }

   /*
    * Patient requests form to search for prescription.
    */
   @GetMapping("/prescription/fill")
   public String getfillForm(Model model) {
      model.addAttribute("prescription", new Prescription());
      return "prescription_fill";
   }

   /*
    * Process the new prescription form.
    * 1.  Validate that Doctor SSN exists and matches Doctor Name.
    * 2.  Validate that Patient SSN exists and matches Patient Name.
    * 3.  Validate that Drug name exists.
    * 4.  Insert new prescription.
    * 5.  If error, return error message and the prescription form
    * 6.  Otherwise, return the prescription with the rxid number that was
    * generated by the database.
    */
   @PostMapping("/prescription")
   public String newPrescription(Prescription p,
                                 Model model) {


      try (Connection con = getConnection();) {
         if (!isValidDoctor(p.getDoctor_ssn(), p.getDoctorName(), p, model)) {
            model.addAttribute("message", "Error. Invalid Doctor Information.");
            model.addAttribute("prescription", p);
            return "prescription_create";
         }
         if (!isValidPatient(p.getPatient_ssn(), p.getPatientName())) {
            model.addAttribute("message", "Error. Invalid Patient Information" +
                    ".");
            model.addAttribute("prescription", p);
            return "prescription_create";
         }

         if (!isValidDrug(p.getDrugName())) {
            model.addAttribute("message", "Error. Drug not found.");
            model.addAttribute("prescription", p);
            return "prescription_create";
         }
         if (p.getQuantity() <= 0 || p.getQuantity() > 90) {
            model.addAttribute("message", "Error. Please enter quantity " +
                    "greater than 0 and less than 90.");
            model.addAttribute("prescription", p);
            return "prescription_create";
         }


         PreparedStatement ps = con.prepareStatement(
                 "insert into Prescription(doctor_ssn, doctorName, " +
                         "patient_ssn," +
                         " patientName, drugName, quantity) " + "values (?,?," +
                         "?,?,?,?)",
                 Statement.RETURN_GENERATED_KEYS);

         ps.setString(1, p.getDoctor_ssn());
         ps.setString(2, p.getDoctorName());
         ps.setString(3, p.getPatient_ssn());
         ps.setString(4, p.getPatientName());
         ps.setString(5, p.getDrugName());
         ps.setString(6, String.valueOf(p.getQuantity()));
         int rc = ps.executeUpdate();
         ResultSet pres = ps.getGeneratedKeys();
         if (pres.next())
            p.setRxid(String.valueOf(pres.getInt(1)));
         if (rc == 1) {
            p.setRxid(String.valueOf(pres.getInt(1)));
            model.addAttribute("message", "Update successful");
            model.addAttribute("prescription", p);
            return "prescription_show";
         } else {
            model.addAttribute("message", "Error. Update was not successful");
            model.addAttribute("prescription", p);
            return "prescription_create";
         }

      } catch (SQLException e) {
         model.addAttribute("message", "SQL Error: " + e.getMessage());
         model.addAttribute("prescription", p);
         return "prescription_show";
      }
   }

   /*
    * Process the prescription fill request from a patient.
    * 1.  Validate that Prescription p contains rxid, pharmacy name and
    * pharmacy address
    *     and uniquely identify a prescription and a pharmacy.
    * 2.  update prescription with pharmacyid, name and address.
    * 3.  update prescription with today's date.
    * 4.  Display updated prescription
    * 5.  or if there is an error show the form with an error message.
    */
   @PostMapping("/prescription/fill")
   public String processFillForm(Prescription p, Model model) {

      try (Connection con = getConnection();) {
         // checks that all fields are filled
         if (!isFormFilled(p, model)) {
            model.addAttribute("message", "Please fill all the fields");
            model.addAttribute("prescription", p);
            return "prescription_fill";
         }

         //Checks to validate prescription rxid and patient
         if (!patientHasPrescription(p, model)) {
            model.addAttribute("message", "Prescription Not Found");
            model.addAttribute("prescription", p);
            return "prescription_fill";
         }
         //Checks to validate pharmacy information, if correct data is
         // updated in prescription
         if (!verifyAndUpdatePharmacy(p, model)) {
            model.addAttribute("message", "Pharmacy Not Found");
            model.addAttribute("prescription", p);
            return "prescription_fill";
         }
         if (!fillPrescription(p, model)) {
            model.addAttribute("message", "Error Unable to fill prescription.");
            model.addAttribute("prescription", p);
            return "prescription_fill";
         }
         ;
      } catch (SQLException e) {
         e.printStackTrace();
      }
      return "prescription_show";
   }

   /**
    * Inserts prescription data into pharmacy_has_drug relation
    *
    * @param p     prescription
    * @param model
    * @return true if successfully filled, false if not successfull
    */
   private boolean fillPrescription(Prescription p, Model model) {
      try (Connection con = getConnection();) {
         PreparedStatement prescription = con.prepareStatement("SELECT * from" +
                 " Prescription WHERE rxid = ? AND patientName = ?");
         prescription.setInt(1, Integer.parseInt(p.getRxid()));
         prescription.setString(2, p.getPatientName());
         ResultSet rs = prescription.executeQuery();
         if (rs.next()) {
            String drug_name = rs.getString("drugName");
            int quantity = rs.getInt("quantity");
            String patient_ssn = rs.getString("patient_ssn");
            String patient_name = rs.getString("patientName");
            String doc_name = rs.getString("doctor_ssn");
            String doc_ssn = rs.getString("doctorName");
            p.setDrugName(drug_name);
            p.setQuantity(quantity);
            p.setPatientName(patient_name);
            p.setPatient_ssn(patient_ssn);
            p.setDoctorName(doc_name);
            p.setDoctor_ssn(doc_ssn);
            p.setDateFilled(String.valueOf(LocalDate.now()));
            PreparedStatement fill = con.prepareStatement("INSERT INTO " +
                    "Pharmacy_has_Prescription(Pharmacy_pharmacyID, " +
                    "Prescription_rxid, cost, quantity, fillDate) VALUES (?, " +
                    "?, ?, ?, ?)");
            Double cost_calc = calculateCost(p, model);
            fill.setInt(1, Integer.parseInt(p.getPharmacyID()));
            fill.setInt(2, Integer.parseInt(p.getRxid()));
            fill.setDouble(3, cost_calc);
            fill.setInt(4, p.getQuantity());
            fill.setDate(5, Date.valueOf(p.getDateFilled()));
            fill.executeUpdate();

            return true;
         }
      } catch (SQLException e) {
         model.addAttribute("message", "SQL Error: " + e.getMessage());
         model.addAttribute("prescription", p);
         return false;
      }
      return false;
   }

   /*
    * return JDBC Connection using jdbcTemplate in Spring Server
    */
   private Connection getConnection() throws SQLException {
      Connection conn = jdbcTemplate.getDataSource()
              .getConnection();
      return conn;
   }

   /**
    * Helper method that validates doctor information
    *
    * @param doctor_ssn doctor's ssn
    * @param name       doctors name
    * @return true if doctor information matches DB, false if not
    */
   private boolean isValidDoctor(String doctor_ssn, String name,
                                 Prescription p, Model model) {
      try (Connection con = getConnection();) {
         PreparedStatement ps = con.prepareStatement("SELECT name, ssn from " +
                 "doctor where name = ? and ssn = ?");
         ps.setString(1, name);
         ps.setInt(2, Integer.parseInt(doctor_ssn));
         ResultSet rs = ps.executeQuery();
         if (rs.next()) {
            if (doctor_ssn.equals(rs.getString("ssn")) && name.equals(rs.getString("name"))) {
               p.setDoctorName(rs.getString("name"));
               return true;
            }
         }

      } catch (SQLException e) {
         e.printStackTrace();
         return false;
      }

      return false;
   }

   /**
    * Helper method that validates Patient information
    *
    * @param patient_ssn patient's ssn
    * @param name        patient name
    * @return true if patient information matches DB, false if not
    */
   private boolean isValidPatient(String patient_ssn, String name) {
      try (Connection con = getConnection();) {
         PreparedStatement ps = con.prepareStatement("SELECT name, ssn from " +
                 "patient where name = ? and ssn = ?");
         ps.setString(1, name);
         ps.setInt(2, Integer.parseInt(patient_ssn));
         ResultSet rs = ps.executeQuery();

         if (rs.next()) {
            String ssn = rs.getString("ssn");
            String patient_name = rs.getString("name");
            return (ssn.equals(patient_ssn) && patient_name.equals(name));
         }

      } catch (SQLException e) {
         e.printStackTrace();
         return false;
      }

      return false;
   }

   /**
    * validates drug
    *
    * @param drug being prescribed
    * @return true if drug exists, false if not
    */
   private boolean isValidDrug(String drug) {
      try (Connection con = getConnection();) {
         PreparedStatement ps = con.prepareStatement("SELECT drugName from " +
                 "drug where drug.drugName LIKE ?");
         ps.setString(1, "%" + drug + "%");
         ResultSet rs = ps.executeQuery();
         if (rs.next()) {
            String drug_name = rs.getString("drugNAme");
            return drug.equals(drug_name);
         }
      } catch (SQLException e) {
         e.printStackTrace();
         return false;
      }
      return false;
   }

   /**
    * Verifies if this form is filled
    *
    * @param p     this prescription
    * @param model this model
    * @return true if form filled, false if not.
    */
   private boolean isFormFilled(Prescription p, Model model) {
      String rxid = p.getRxid();
      String pharm_name = p.getPharmacyName();
      String pharm_Street = p.getPharmacyStreet();
      String pharm_City = p.getPharmacyCity();
      String pharm_State = p.getPharmacyState();
      String pharm_zip = p.getPharmacyZip();


      if (rxid.isBlank() || pharm_Street.isBlank() || pharm_name.isBlank() || pharm_City.isBlank() || pharm_State.isBlank() || pharm_zip.isBlank()) {
         model.addAttribute("message", "Please fill all the fields");
         model.addAttribute("prescription", p);
         return false;
      }
      return true;
   }

   /**
    * Verifies patient rxid and patient name
    *
    * @param p     prescription
    * @param model this model
    * @return true if matches db false if not.
    */
   private boolean patientHasPrescription(Prescription p, Model model) {
      try (Connection con = getConnection();) {
         String query = "SELECT * " +
                 "from Prescription where rxid = ? AND " +
                 "patientName = ?";
         PreparedStatement ps = con.prepareStatement(query);
         ps.setString(1, p.getRxid());
         ps.setString(2, p.getPatientName());
         ResultSet rs = ps.executeQuery();
         if (rs.next()) {
            String rxid_db = rs.getString("rxid");
            String name_db = rs.getString("patientName");

            return rxid_db.equals(p.getRxid()) && name_db.equals(p.getPatientName());
         }
      } catch (SQLException e) {
         e.printStackTrace();
         return false;
      }

      return false;
   }

   /**
    * Verifies pharmacy information matches db
    *
    * @param p     this prescription
    * @param model this model
    * @return true if matches, false if not
    */
   private boolean verifyAndUpdatePharmacy(Prescription p, Model model) {
      try (Connection con = getConnection();) {
         String pharm_name = p.getPharmacyName();
         String pharm_street = p.getPharmacyStreet();
         String pharm_city = p.getPharmacyCity();
         String pharm_state = p.getPharmacyState();
         String pharm_zip = p.getPharmacyZip();
         PreparedStatement ps = con.prepareStatement("SELECT pharmacyID, " +
                 "name, street, city, state, zip, phone " +
                 "from Pharmacy where name LIKE ? AND street LIKE ? AND city " +
                 "LIKE ? AND state = ? AND zip LIKE ?");
         ps.setString(1, pharm_name + "%");
         ps.setString(2, pharm_street + "%");
         ps.setString(3, pharm_city + "%");
         ps.setString(4, pharm_state);
         ps.setString(5, pharm_zip + "%");

         ResultSet rs = ps.executeQuery();
         if (rs.next()) {
            p.setPharmacyID(rs.getString("pharmacyID"));
            p.setPharmacyStreet(pharm_name);
            p.setPharmacyStreet(pharm_street);
            p.setPharmacyCity(pharm_city);
            p.setPharmacyState(pharm_state);
            p.setPharmacyZip(pharm_zip);
            p.setPharmacyPhone(rs.getString("phone"));
            p.setPharmacyAddress();
            return true;
         }


      } catch (SQLException e) {
         e.printStackTrace();
         model.addAttribute("message", "Error, Pharmacy Not Found.");
         model.addAttribute("prescription", p);
         return false;
      }
      return false;
   }

   /**
    * Helper method to calculate cost of prescription
    *
    * @param p     this prescription
    * @param model this model
    * @return total cost of this prescription.
    */
   private double calculateCost(Prescription p, Model model) {
      int id = Integer.MIN_VALUE;
      double cost = 0;
      try (Connection con = getConnection();) {
         PreparedStatement trade_name_to_drugID = con.prepareStatement(
                 "SELECT idDrug from drug where drugName = ?");
         trade_name_to_drugID.setString(1, p.getDrugName());
         ResultSet drugID = trade_name_to_drugID.executeQuery();

         if (drugID.next()) {
            id = drugID.getInt("idDrug");
         }

         PreparedStatement ps = con.prepareStatement("SELECT " +
                 "PharmacyID, idDrug, quantity, cost from " +
                 "Pharmacy_has_Drug WHERE PharmacyID = ? AND " +
                 "idDrug = ? ");
         ps.setString(1, p.getPharmacyID());
         ps.setInt(2, id);
         ResultSet getCost = ps.executeQuery();
         if (getCost.next()) {
            cost = getCost.getDouble("cost") * p.getQuantity();
            p.setCost(String.format("%.2f", cost));
            return cost;
         } else {
            return Double.MIN_VALUE;
         }
      } catch (SQLException e) {
         e.printStackTrace();
         model.addAttribute("message", "Error, Couldn't calculate cost.");
         model.addAttribute("prescription", p);

      }
      return 0;
   }

}
